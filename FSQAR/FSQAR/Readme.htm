<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<meta name="GENERATOR" content="Microsoft Visual Studio"><title>Readme FSQAR Source code</title>

<style type="text/css">
h1 {
font-family: 'Arial';
font-size: 18pt;
font-weight: bold;
text-align: center;
color: maroon;
}
h2 {
font-family: 'Courier New';
font-size: 14pt;
font-weight: bold;
color: olivedrab;
}
body {
font-family: 'Courier New';
font-size: 12pt;
color: black;
}
</style>
</head>
<body>
<h1>This describe FSQAR Source code</h1>
<h2>What is the source code?</h2>
<p>This
is a Visual Studio 2013 solution that includes all needed to build the
application. It was created and examined for Prepar3d version 3.1 and
SDK version 3.1.2.15831 (actually at January 2016). This is not trivial
multithread application that met all Prepar3D SDK requirements. To
build the application just load the solution in Visual Studio and press
'F7', that is all..</p>
<h2>What is good in the code?</h2>
The code is work correctly.
<h2>What is bad in the code?</h2>
<p>This
is a very bad code! This is not C++ code but "C with objects" one. It
breaks many basic principles of Object-Oriented Programming. It is
badly designed and ugly written. I do not advise to use it directly
without any modifications. This code may be used only as a starting
point for developing more advanced application. Let me explain why it
is. In the first, this code does not use standard C++ library (STL) and
other templates (i.e. it does not use general programming paradigm). In
the second, it does not use any exception the code uses 'return codes'
like Win32 API. The code is mixt from plain C and objects. The design
of the objects is not comprehensible. Can we say that the code is true
C++ if it was not build on the base of C++ philosophy?</p>
<h2>How to improve the program?</h2>
<p>There
is an infinite set of ways to improve this code. But what for? The
program has a narrow target and this target is achieved.</p>
<h2>Description of the main idea</h2>
<p>The basic idea is to create a multithreaded application in
which the main thread is UI thread and the second working thread is
SimConnect dispatcher. These threads are exchanging of synchronization
events. It is quite clear how to create the main thread. I propose the
next solution for the working thread. The flight simulator is a message
server. Our application is its client. In this code, the working thread
is running into a message loop from the simulator. This loop is a copy
of the flight simulator SDK examples. However, in any moment the <b>Exit</b> message from
the main UI thread can be received. The function <b>IsTerminated</b> was
placed in the loop for checking of the <b>Exit</b> event. When this event is
occurred the command <b>Quit</b> is sending and the client escape from the
message loop from the server.
</p>
<p>Function <b>IsRinnung</b> checks the connection with the server at every iteration in the message loop. If the connection is terminated at the initiative of the server <b>CloseConnection</b> is called and then the message <b>WM_CLOSE</b> is sending to UI frame window.</p>
<img style="width: 600px;" src="ThreadCode.jpg" alt="ThreadCode">
<p> The client should be having two handles:
The SimConnect handle and the working thread handle. Class <b>CSimClient</b> wraps
these handles.</p>
<img style="width: 800px; height: 565px;" src="ClassDiagram.jpg" alt="ClassDiagram">
<p></p>
</body></html>